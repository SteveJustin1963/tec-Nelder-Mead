////////////////////
1000 i !
1024 s !

1024 r !
2048 c !
512 g !
512 z !

1 t !

:A
  x @ s / 1 - s * x @ s / 1 - s * * 100 * s * y @ 
  s / x @ s / x @ s / * - s * y @ s / - s * + s /
;

:B
  [ 0 0 ] p !
  -1229 p 0? $ !
  1024 p 1? $ !
;

:C
  p 0? A f !
  p 1? A g !
;

:D
  f @ g @ < ( 
    p 0? p 1? $
  ) /E ( 
    p 0? p 1?
  )
;

:E
  p 0? p 1? + 2 / b !
  b @ r * s / p 1? - x !
;

:F
  0 j !
  /U (
    p C
    p D
    f @ t < /W
    p E

    x @ f @ < (
      c * s / y !
      y @ h !
      h @ x @ < (
        y p 0? $ !
      ) /E (
        x p 0? $ !
      )
    ) /E (
      x @ g @ < (
        x p 0? $ !
      ) /E (
        g * s / w !
        w @ v !
        v @ x @ < (
          w p 0? $ !
        ) /E (
          p 1? z * s / u !
          u p 0? $ !
        )
      )
    )

    j 1 + j !
  )
;

////////////////////

// Constants and Parameters
1000 i !          // Set maximum iterations ('i')
1024 s !          // Set scaling factor ('s') for fixed-point (2^10)

// Coefficients for Nelder-Mead
1024 r !          // Set reflection coefficient ('r'), scaled by 's'
2048 c !          // Set expansion coefficient ('c'), scaled by 's' (2 * s)
512 g !           // Set contraction coefficient ('g'), scaled by 's' (0.5 * s)
512 z !           // Set shrink coefficient ('z'), scaled by 's' (0.5 * s)

// Tolerance for Convergence
1 t !             // Set tolerance ('t'), scaled as 0.001 * 's'

// Objective Function (Rosenbrock-like Function)
:A
  x @ s / 1 - s * x @ s / 1 - s * * 100 * s * y @ s / x @ s / x @ s / * - s * y @ s / - s * + s /
;  
// Function A: Calculate (1 - x)^2 + 100 * (y - x^2)^2 with integer scaling

// Initialize Simplex Function
:B
  [ 0 0 ] p !                     // Initialize a 2D simplex with example points, stored in 'p'
  -1229 p 0? $ !                  // Set the first vertex to -1.2 (scaled value) using the correct update method
  1024 p 1? $ !                   // Set the second vertex to 1 (scaled value) using the correct update method
;

// Evaluate Simplex
:C
  p 0? A f !                      // Evaluate the objective function at the first vertex and store in 'f'
  p 1? A g !                      // Evaluate the objective function at the second vertex and store in 'g'
;

// Sort Simplex
:D
  f @ g @ < ( 
    p 0? p 1? $                   // If f < g, swap the vertices in the simplex using the '$' operator
  ) /E ( 
    p 0? p 1?                     // Else, keep the vertices as they are
  )
;

// Reflect, Expand, Contract, Shrink Operations
:E
  p 0? p 1? + 2 / b !             // Calculate the centroid of the simplex and store it in 'b'
  b @ r * s / p 1? - x !          // Perform reflection calculation and store the reflected point in 'x'
;

// Nelder-Mead Main Loop
:F
  0 j !                           // Initialize the iteration count ('j') to 0
  /U (                            // Start an unlimited loop
    p C                           // Evaluate the objective function at the simplex vertices
    p D                           // Sort the simplex based on function values
    f @ t < /W                    // If the function value 'f' is less than the tolerance 't', exit the loop
    p E                           // Perform the reflection operation

    x @ f @ < (                   // If the reflected value is better than the best value
      c * s / y !                 // Calculate expansion and store in 'y'
      y @ h !
      h @ x @ < (
        y p 0? $ !                // Update the simplex with the expanded point using the correct update method
      ) /E (
        x p 0? $ !                // Update the simplex with the reflected point using the correct update method
      )
    ) /E (
      x @ g @ < (                 // If the reflected value is worse but better than the second worst
        x p 0? $ !                // Update the simplex with the reflected point using the correct update method
      ) /E (
        g * s / w !
        w @ v !
        v @ x @ < (
          w p 0? $ !              // Update the simplex with the contracted point using the correct update method
        ) /E (
          p 1? z * s / u !
          u p 0? $ !              // Perform shrink operation and update the simplex using the correct update method
        )
      )
    )

    j 1 + j !                     // Increment the iteration count
  )
;
